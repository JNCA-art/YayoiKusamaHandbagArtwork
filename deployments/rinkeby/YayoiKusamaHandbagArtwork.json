{
  "address": "0xDa4df28B9961Bf5AFC72c6ddd8e7A6818077A66f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initContractURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "uint104",
          "name": "publicPrice",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "whitelistPrice",
          "type": "uint104"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipWhitelistSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        },
        {
          "internalType": "uint104",
          "name": "publicPrice",
          "type": "uint104"
        },
        {
          "internalType": "bool",
          "name": "isWhitelist",
          "type": "bool"
        },
        {
          "internalType": "uint104",
          "name": "whitelistPrice",
          "type": "uint104"
        },
        {
          "internalType": "uint16",
          "name": "whitelistSupply",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistAlreadyMinted",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1aff5abdbbaba37963bbc149729787da1f7fc75918d2508bd67efe968330676a",
  "receipt": {
    "to": null,
    "from": "0x4d3b9625656af699F53D364A980Ea78bb6035978",
    "contractAddress": "0xDa4df28B9961Bf5AFC72c6ddd8e7A6818077A66f",
    "transactionIndex": 14,
    "gasUsed": "3004026",
    "logsBloom": "0x
    "blockHash": "0xc1f117666a190f075ed67ae56634746e9f5d332767ecd3fd49757b66ad41ac0a",
    "transactionHash": "0x1aff5abdbbaba37963bbc149729787da1f7fc75918d2508bd67efe968330676a",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10285621,
        "transactionHash": "0x1aff5abdbbaba37963bbc149729787da1f7fc75918d2508bd67efe968330676a",
        "address": "0xDa4df28B9961Bf5AFC72c6ddd8e7A6818077A66f",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0xc1f117666a190f075ed67ae56634746e9f5d332767ecd3fd49757b66ad41ac0a"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 10285621,
        "transactionHash": "0x1aff5abdbbaba37963bbc149729787da1f7fc75918d2508bd67efe968330676a",
        "address": "0xDa4df28B9961Bf5AFC72c6ddd8e7A6818077A66f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0xc1f117666a190f075ed67ae56634746e9f5d332767ecd3fd49757b66ad41ac0a"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 10285621,
        "transactionHash": "0x1aff5abdbbaba37963bbc149729787da1f7fc75918d2508bd67efe968330676a",
        "address": "0xDa4df28B9961Bf5AFC72c6ddd8e7A6818077A66f",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0xc1f117666a190f075ed67ae56634746e9f5d332767ecd3fd49757b66ad41ac0a"
      }
    ],
    "blockNumber": 10285621,
    "cumulativeGasUsed": "5143406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmbhxP5ubdK1B8c5S5PkKiLoUeatGd9zfQA57PWbnE2iyX",
    "ipfs://QmazDA25V9CyL55vuPJqqAH7dMe5TtAWjH2KdzXKHminH5/",
    "0xFC377879e83bc8E247E10B316aFbD00A9D165d16",
    "0x4d3b9625656af699F53D364A980Ea78bb6035978",
    "12000000000000000",
    "10000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "254ce76d19e2ef8662271c4c07a87fc1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initContractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"publicPrice\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"whitelistPrice\",\"type\":\"uint104\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"publicPrice\",\"type\":\"uint104\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"whitelistPrice\",\"type\":\"uint104\"},{\"internalType\":\"uint16\",\"name\":\"whitelistSupply\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAlreadyMinted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Japan NFT Culture Association (https://www.jnca.io)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Setup contractURI, initial base URI, ERC721\"},\"flipPublicSale()\":{\"details\":\"Flip public sale state\"},\"flipWhitelistSale()\":{\"details\":\"Flip whitelist sale state\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Change base URI to reveal NFT\"},\"supportsInterface(bytes4)\":{\"details\":\"Override interface\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw()\":{\"details\":\"Withdraw fund from contract to receiver\"}},\"title\":\"Artwork NFT by Yayoi Kusama\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Contract info read by marketplace\"},\"mint(uint256)\":{\"notice\":\"Mint certain amount of tokens\"},\"whitelistMint(bytes,uint8)\":{\"notice\":\"Mint for whitelist (EIP712)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YayoiKusamaHandbagArtwork.sol\":\"YayoiKusamaHandbagArtwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n    Context,\\n    ERC165,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 private currentIndex = 0;\\n\\n    uint256 internal immutable collectionSize;\\n    uint256 internal immutable maxBatchSize;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev\\n     * `maxBatchSize` refers to how much a minter can mint at a time.\\n     * `collectionSize_` refers to how many tokens are in the collection.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 maxBatchSize_,\\n        uint256 collectionSize_\\n    ) {\\n        require(\\n            collectionSize_ > 0,\\n            \\\"ERC721A: collection must have a nonzero supply\\\"\\n        );\\n        require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n        maxBatchSize = maxBatchSize_;\\n        collectionSize = collectionSize_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n        uint256 numMintedSoFar = totalSupply();\\n        uint256 tokenIdsIdx = 0;\\n        address currOwnershipAddr = address(0);\\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\\n            TokenOwnership memory ownership = _ownerships[i];\\n            if (ownership.addr != address(0)) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            if (currOwnershipAddr == owner) {\\n                if (tokenIdsIdx == index) {\\n                    return i;\\n                }\\n                tokenIdsIdx++;\\n            }\\n        }\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: balance query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: number minted query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n        uint256 lowestTokenToCheck;\\n        if (tokenId >= maxBatchSize) {\\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n        }\\n\\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n            TokenOwnership memory ownership = _ownerships[curr];\\n            if (ownership.addr != address(0)) {\\n                return ownership;\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721A: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < currentIndex;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - there must be `quantity` tokens remaining unminted in the total collection.\\n     * - `to` cannot be the zero address.\\n     * - `quantity` cannot be larger than the max batch size.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n        require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n        require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        AddressData memory addressData = _addressData[to];\\n        _addressData[to] = AddressData(\\n            addressData.balance + uint128(quantity),\\n            addressData.numberMinted + uint128(quantity)\\n        );\\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        uint256 updatedIndex = startTokenId;\\n\\n        for (uint256 i = 0; i < quantity; i++) {\\n            emit Transfer(address(0), to, updatedIndex);\\n            require(\\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n                \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n            );\\n            updatedIndex++;\\n        }\\n\\n        currentIndex = updatedIndex;\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            getApproved(tokenId) == _msgSender() ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n        require(\\n            isApprovedOrOwner,\\n            \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        require(\\n            prevOwnership.addr == from,\\n            \\\"ERC721A: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        _addressData[from].balance -= 1;\\n        _addressData[to].balance += 1;\\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n        uint256 nextTokenId = tokenId + 1;\\n        if (_ownerships[nextTokenId].addr == address(0)) {\\n            if (_exists(nextTokenId)) {\\n                _ownerships[nextTokenId] = TokenOwnership(\\n                    prevOwnership.addr,\\n                    prevOwnership.startTimestamp\\n                );\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    uint256 public nextOwnerToExplicitlySet = 0;\\n\\n    /**\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n     */\\n    function _setOwnersExplicit(uint256 quantity) internal {\\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n        require(quantity > 0, \\\"quantity must be nonzero\\\");\\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n        if (endIndex > collectionSize - 1) {\\n            endIndex = collectionSize - 1;\\n        }\\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n        require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n            if (_ownerships[i].addr == address(0)) {\\n                TokenOwnership memory ownership = ownershipOf(i);\\n                _ownerships[i] = TokenOwnership(\\n                    ownership.addr,\\n                    ownership.startTimestamp\\n                );\\n            }\\n        }\\n        nextOwnerToExplicitlySet = endIndex + 1;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x6390d88e281b3e9e63206b33dd0b3b3f4cff2d7b4fab1598ab1709aaaa5df1ae\",\"license\":\"MIT\"},\"contracts/YayoiKusamaHandbagArtwork.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./ERC721A.sol\\\";\\n\\n/**\\n @title Artwork NFT by Yayoi Kusama\\n @author Japan NFT Culture Association (https://www.jnca.io)\\n */\\ncontract YayoiKusamaHandbagArtwork is ERC721A, EIP712, AccessControl {\\n    uint16 private constant MAX_SUPPLY = 7000;\\n\\n    uint16 private constant WHITELIST_MAX_SUPPLY = 3000;\\n\\n    uint8 private constant BATCH_MINT_SIZE = 5;\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    string private _contractURI;\\n\\n    string private _tokenBaseURI;\\n\\n    address payable private _fundReceiver;\\n\\n    mapping(address => uint8) public whitelistAlreadyMinted;\\n\\n    struct SaleInfo {\\n        bool isPublic;\\n        uint104 publicPrice;\\n        bool isWhitelist;\\n        uint104 whitelistPrice;\\n        uint16 whitelistSupply;\\n    }\\n    SaleInfo public saleInfo;\\n\\n    // voucher for user to redeem\\n    struct NFTVoucher {\\n        address redeemer; // specify user to redeem this voucher\\n    }\\n\\n    /// @dev Setup contractURI, initial base URI, ERC721\\n    constructor(\\n        string memory initContractURI,\\n        string memory initBaseURI,\\n        address payable receiver,\\n        address defaultAdmin,\\n        uint104 publicPrice,\\n        uint104 whitelistPrice\\n    )\\n        ERC721A(\\n            \\\"Yayoi Kusama Handbag Artwork\\\",\\n            \\\"YKHA\\\",\\n            BATCH_MINT_SIZE,\\n            MAX_SUPPLY\\n        )\\n        EIP712(\\\"YKHA\\\", \\\"1\\\")\\n    {\\n        _setRoleAdmin(ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _setupRole(ADMIN_ROLE, defaultAdmin);\\n        _setupRole(ADMIN_ROLE, _msgSender());\\n        _contractURI = initContractURI;\\n        _tokenBaseURI = initBaseURI;\\n        _fundReceiver = receiver;\\n        saleInfo.isPublic = false;\\n        saleInfo.publicPrice = publicPrice;\\n        saleInfo.whitelistPrice = whitelistPrice;\\n        saleInfo.whitelistSupply = 0;\\n    }\\n\\n    /// @notice Contract info read by marketplace\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Mint certain amount of tokens\\n    function mint(uint256 amount) external payable {\\n        require(saleInfo.isPublic, \\\"not in public sale\\\");\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"exceed max supply\\\");\\n        require(amount * saleInfo.publicPrice == msg.value, \\\"payment error\\\");\\n        _safeMint(_msgSender(), amount);\\n    }\\n\\n    /// @notice Mint for whitelist (EIP712)\\n    function whitelistMint(bytes calldata signature, uint8 amount)\\n        external\\n        payable\\n    {\\n        _verify(signature);\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"exceed max supply\\\");\\n        require(\\n            saleInfo.whitelistSupply + amount <= WHITELIST_MAX_SUPPLY,\\n            \\\"exceed whitelist max supply\\\"\\n        );\\n        saleInfo.whitelistSupply += amount;\\n        require(\\n            whitelistAlreadyMinted[_msgSender()] + amount <= BATCH_MINT_SIZE,\\n            \\\"exceed whitelist quota\\\"\\n        );\\n        whitelistAlreadyMinted[_msgSender()] += amount;\\n        require(amount * saleInfo.whitelistPrice == msg.value, \\\"payment error\\\");\\n        _safeMint(_msgSender(), amount);\\n    }\\n\\n    /// @dev Withdraw fund from contract to receiver\\n    function withdraw() external {\\n        Address.sendValue(_fundReceiver, address(this).balance);\\n    }\\n\\n    /// @dev Change base URI to reveal NFT\\n    function setBaseURI(string calldata newBaseURI)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        _tokenBaseURI = newBaseURI;\\n    }\\n\\n    /// @dev Flip public sale state\\n    function flipPublicSale() external onlyRole(ADMIN_ROLE) {\\n        saleInfo.isPublic = !saleInfo.isPublic;\\n    }\\n\\n    /// @dev Flip whitelist sale state\\n    function flipWhitelistSale() external onlyRole(ADMIN_ROLE) {\\n        saleInfo.isWhitelist = !saleInfo.isWhitelist;\\n    }\\n\\n    /// @dev Override ERC721._baseURI\\n    function _baseURI() internal view override returns (string memory) {\\n        return _tokenBaseURI;\\n    }\\n\\n    /// @dev Verify voucher\\n    function _verify(bytes calldata signature) private view {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"NFTVoucher(address redeemer)\\\"),\\n                    _msgSender()\\n                )\\n            )\\n        );\\n        require(\\n            hasRole(ADMIN_ROLE, ECDSA.recover(digest, signature)),\\n            \\\"invalid or unauthorized\\\"\\n        );\\n    }\\n\\n    /// @dev Override interface\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721A, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3ea3de8f11c6442ddc2111f0e376362b76bfc67353447068a526a49062d7d915\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040526000805560006007553480156200001b57600080fd5b5060405162003708380380620037088339810160408190526200003e9162000596565b604080518082018252600480825263594b484160e01b60208084018290528451808601865260018152603160f81b8183015285518087018752601c81527f5961796f69204b7573616d612048616e6462616720417274776f726b000000008184015286518088019097529386529085019190915291926005611b58620000c8565b60405180910390fd5b600082116200012a5760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b6064820152608401620000bf565b83516200013f90600190602087019062000420565b5082516200015590600290602086019062000420565b5060a091909152608052505081516020838101919091208251918301919091206101208290526101408190524660e0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001f68184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60c0523060601b610100526101605250620002289250600080516020620036e883398151915291506000905062000321565b620002356000846200036c565b62000250600080516020620036e8833981519152846200036c565b6200026b600080516020620036e8833981519152336200036c565b85516200028090600990602089019062000420565b5084516200029690600a90602088019062000420565b50600b80546001600160a01b0319166001600160a01b039590951694909417909355600d80547fffffffff00000000000000000000000000ff0000000000000000000000000000166101006001600160681b0393841602600160781b600160e01b03191617600160781b92909416919091029290921761ffff60e01b191690915550620006b7915050565b600082815260086020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6200037882826200037c565b5050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16620003785760008281526008602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200042e906200064b565b90600052602060002090601f0160209004810192826200045257600085556200049d565b82601f106200046d57805160ff19168380011785556200049d565b828001600101855582156200049d579182015b828111156200049d57825182559160200191906001019062000480565b50620004ab929150620004af565b5090565b5b80821115620004ab5760008155600101620004b0565b600082601f830112620004d7578081fd5b81516001600160401b0380821115620004f457620004f462000688565b604051601f8301601f19908116603f011681019082821181831017156200051f576200051f62000688565b816040528381526020925086838588010111156200053b578485fd5b8491505b838210156200055e57858201830151818301840152908201906200053f565b838211156200056f57848385830101525b9695505050505050565b80516001600160681b03811681146200059157600080fd5b919050565b60008060008060008060c08789031215620005af578182fd5b86516001600160401b0380821115620005c6578384fd5b620005d48a838b01620004c6565b97506020890151915080821115620005ea578384fd5b50620005f989828a01620004c6565b95505060408701516200060c816200069e565b60608801519094506200061f816200069e565b92506200062f6080880162000579565b91506200063f60a0880162000579565b90509295509295509295565b600181811c908216806200066057607f821691505b602082108114156200068257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620006b457600080fd5b50565b60805160a05160c05160e0516101005160601c610120516101405161016051612fbd6200072b60003960006123e701526000612436015260006124110152600061236a01526000612394015260006123be015260008181611a6401528181611a8e015261213f015260005050612fbd6000f3fe6080604052600436106101ee5760003560e01c80635d4788771161010d578063a0712d68116100a0578063c87b56dd1161006f578063c87b56dd146105ef578063d547741f1461060f578063d7224ba01461062f578063e8a3d48514610645578063e985e9c51461065a57600080fd5b8063a0712d6814610587578063a217fddf1461059a578063a22cb465146105af578063b88d4fde146105cf57600080fd5b806388084605116100dc57806388084605146104b45780638e3695b8146104c957806391d148541461055257806395d89b411461057257600080fd5b80635d478877146104105780636352211e1461045257806370a082311461047257806375b238fc1461049257600080fd5b80632f2ff15d116101855780633ccfd60b116101545780633ccfd60b1461039b57806342842e0e146103b05780634f6ccce7146103d057806355f804b3146103f057600080fd5b80632f2ff15d146103285780632f745c59146103485780632fad121a1461036857806336568abe1461037b57600080fd5b80630f5d66ad116101c15780630f5d66ad146102a457806318160ddd146102b957806323b872dd146102d8578063248a9ca3146102f857600080fd5b806301ffc9a7146101f357806306fdde0314610228578063081812fc1461024a578063095ea7b314610282575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612b00565b6106a3565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023d6106b4565b60405161021f9190612cdf565b34801561025657600080fd5b5061026a610265366004612ac6565b610746565b6040516001600160a01b03909116815260200161021f565b34801561028e57600080fd5b506102a261029d366004612a9d565b6107d6565b005b3480156102b057600080fd5b506102a26108ee565b3480156102c557600080fd5b506000545b60405190815260200161021f565b3480156102e457600080fd5b506102a26102f3366004612953565b610929565b34801561030457600080fd5b506102ca610313366004612ac6565b60009081526008602052604090206001015490565b34801561033457600080fd5b506102a2610343366004612ade565b610934565b34801561035457600080fd5b506102ca610363366004612a9d565b61095a565b6102a2610376366004612b38565b610ac8565b34801561038757600080fd5b506102a2610396366004612ade565b610d14565b3480156103a757600080fd5b506102a2610d92565b3480156103bc57600080fd5b506102a26103cb366004612953565b610daa565b3480156103dc57600080fd5b506102ca6103eb366004612ac6565b610dc5565b3480156103fc57600080fd5b506102a261040b366004612b92565b610e27565b34801561041c57600080fd5b5061044061042b366004612907565b600c6020526000908152604090205460ff1681565b60405160ff909116815260200161021f565b34801561045e57600080fd5b5061026a61046d366004612ac6565b610e52565b34801561047e57600080fd5b506102ca61048d366004612907565b610e64565b34801561049e57600080fd5b506102ca600080516020612f6883398151915281565b3480156104c057600080fd5b506102a2610ef5565b3480156104d557600080fd5b50600d546105169060ff808216916001600160681b036101008204811692600160701b83041691600160781b81049091169061ffff600160e01b9091041685565b6040805195151586526001600160681b03948516602087015292151592850192909252909116606083015261ffff16608082015260a00161021f565b34801561055e57600080fd5b5061021361056d366004612ade565b610f23565b34801561057e57600080fd5b5061023d610f4e565b6102a2610595366004612ac6565b610f5d565b3480156105a657600080fd5b506102ca600081565b3480156105bb57600080fd5b506102a26105ca366004612a63565b611064565b3480156105db57600080fd5b506102a26105ea36600461298e565b611129565b3480156105fb57600080fd5b5061023d61060a366004612ac6565b61115c565b34801561061b57600080fd5b506102a261062a366004612ade565b611229565b34801561063b57600080fd5b506102ca60075481565b34801561065157600080fd5b5061023d61124f565b34801561066657600080fd5b50610213610675366004612921565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60006106ae8261125e565b92915050565b6060600180546106c390612ea5565b80601f01602080910402602001604051908101604052809291908181526020018280546106ef90612ea5565b801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b5050505050905090565b6000610753826000541190565b6107ba5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107e182610e52565b9050806001600160a01b0316836001600160a01b031614156108505760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016107b1565b336001600160a01b038216148061086c575061086c8133610675565b6108de5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016107b1565b6108e9838383611283565b505050565b600080516020612f6883398151915261090781336112df565b50600d805460ff60701b198116600160701b9182900460ff1615909102179055565b6108e9838383611343565b60008281526008602052604090206001015461095081336112df565b6108e983836116cb565b600061096583610e64565b82106109be5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016107b1565b600080549080805b83811015610a68576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610a1957805192505b876001600160a01b0316836001600160a01b03161415610a555786841415610a47575093506106ae92505050565b83610a5181612ee0565b9450505b5080610a6081612ee0565b9150506109c6565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016107b1565b610ad28383611751565b611b5860ff8216610ae260005490565b610aec9190612d84565b1115610b2e5760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016107b1565b600d54610bb890610b4e9060ff841690600160e01b900461ffff16612d67565b61ffff161115610ba05760405162461bcd60e51b815260206004820152601b60248201527f6578636565642077686974656c697374206d617820737570706c79000000000060448201526064016107b1565b600d805460ff83169190601c90610bc3908490600160e01b900461ffff16612d67565b92506101000a81548161ffff021916908361ffff160217905550600560ff1681600c6000610bee3390565b6001600160a01b03168152602081019190915260400160002054610c15919060ff16612d9c565b60ff161115610c5f5760405162461bcd60e51b81526020600482015260166024820152756578636565642077686974656c6973742071756f746160501b60448201526064016107b1565b336000908152600c602052604081208054839290610c8190849060ff16612d9c565b92506101000a81548160ff021916908360ff16021790555034600d600001600f9054906101000a90046001600160681b03168260ff16610cc19190612dd5565b6001600160681b031614610d075760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b60448201526064016107b1565b6108e9338260ff16611848565b6001600160a01b0381163314610d845760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107b1565b610d8e8282611862565b5050565b600b54610da8906001600160a01b0316476118c9565b565b6108e983838360405180602001604052806000815250611129565b600080548210610e235760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016107b1565b5090565b600080516020612f68833981519152610e4081336112df565b610e4c600a848461281b565b50505050565b6000610e5d826119e2565b5192915050565b60006001600160a01b038216610ed05760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016107b1565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b600080516020612f68833981519152610f0e81336112df565b50600d805460ff19811660ff90911615179055565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600280546106c390612ea5565b600d5460ff16610fa45760405162461bcd60e51b81526020600482015260126024820152716e6f7420696e207075626c69632073616c6560701b60448201526064016107b1565b611b5881610fb160005490565b610fbb9190612d84565b1115610ffd5760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016107b1565b600d54349061101a9061010090046001600160681b031683612e04565b146110575760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b60448201526064016107b1565b6110613382611848565b50565b6001600160a01b0382163314156110bd5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016107b1565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611134848484611343565b61114084848484611b8c565b610e4c5760405162461bcd60e51b81526004016107b190612cf2565b6060611169826000541190565b6111cd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107b1565b60006111d7611c9a565b905060008151116111f75760405180602001604052806000815250611222565b8061120184611ca9565b604051602001611212929190612bfe565b6040516020818303038152906040525b9392505050565b60008281526008602052604090206001015461124581336112df565b6108e98383611862565b6060600980546106c390612ea5565b60006001600160e01b03198216637965db0b60e01b14806106ae57506106ae82611dc3565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6112e98282610f23565b610d8e57611301816001600160a01b03166014611e2e565b61130c836020611e2e565b60405160200161131d929190612c2d565b60408051601f198184030181529082905262461bcd60e51b82526107b191600401612cdf565b600061134e826119e2565b80519091506000906001600160a01b0316336001600160a01b0316148061138557503361137a84610746565b6001600160a01b0316145b80611397575081516113979033610675565b9050806114015760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107b1565b846001600160a01b031682600001516001600160a01b0316146114755760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016107b1565b6001600160a01b0384166114d95760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107b1565b6114e96000848460000151611283565b6001600160a01b038516600090815260046020526040812080546001929061151b9084906001600160801b0316612e23565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b0386166000908152600460205260408120805460019450909261156791859116612d45565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b031990911691909216171790556115ef846001612d84565b6000818152600360205260409020549091506001600160a01b031661168157611619816000541190565b156116815760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b6116d58282610f23565b610d8e5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561170d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b604080517fdabea70844bf24d9249fbcd43ff305a229af24da603ae5c43f957f44dcbd0bed602082015233918101919091526000906117a89060600160405160208183030381529060405280519060200120612010565b90506117fc600080516020612f6883398151915261056d8386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061205e92505050565b6108e95760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a656400000000000000000060448201526064016107b1565b610d8e828260405180602001604052806000815250612082565b61186c8282610f23565b15610d8e5760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b804710156119195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107b1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611966576040519150601f19603f3d011682016040523d82523d6000602084013e61196b565b606091505b50509050806108e95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107b1565b6040805180820190915260008082526020820152611a01826000541190565b611a605760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016107b1565b60007f00000000000000000000000000000000000000000000000000000000000000008310611ac157611ab37f000000000000000000000000000000000000000000000000000000000000000084612e4b565b611abe906001612d84565b90505b825b818110611b2b576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215611b1857949350505050565b5080611b2381612e8e565b915050611ac3565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b60648201526084016107b1565b60006001600160a01b0384163b15611c8e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611bd0903390899088908890600401612ca2565b602060405180830381600087803b158015611bea57600080fd5b505af1925050508015611c1a575060408051601f3d908101601f19168201909252611c1791810190612b1c565b60015b611c74573d808015611c48576040519150601f19603f3d011682016040523d82523d6000602084013e611c4d565b606091505b508051611c6c5760405162461bcd60e51b81526004016107b190612cf2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c92565b5060015b949350505050565b6060600a80546106c390612ea5565b606081611ccd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cf75780611ce181612ee0565b9150611cf09050600a83612dc1565b9150611cd1565b60008167ffffffffffffffff811115611d2057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d4a576020820181803683370190505b5090505b8415611c9257611d5f600183612e4b565b9150611d6c600a86612efb565b611d77906030612d84565b60f81b818381518110611d9a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611dbc600a86612dc1565b9450611d4e565b60006001600160e01b031982166380ac58cd60e01b1480611df457506001600160e01b03198216635b5e139f60e01b145b80611e0f57506001600160e01b0319821663780e9d6360e01b145b806106ae57506301ffc9a760e01b6001600160e01b03198316146106ae565b60606000611e3d836002612e04565b611e48906002612d84565b67ffffffffffffffff811115611e6e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e98576020820181803683370190505b509050600360fc1b81600081518110611ec157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611efe57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f22846002612e04565b611f2d906001612d84565b90505b6001811115611fc1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f6f57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611f9357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611fba81612e8e565b9050611f30565b5083156112225760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107b1565b60006106ae61201d61235d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061206d8585612484565b9150915061207a816124f4565b509392505050565b6000546001600160a01b0384166120e55760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107b1565b6120f0816000541190565b1561213d5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e74656400000060448201526064016107b1565b7f00000000000000000000000000000000000000000000000000000000000000008311156121b85760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b60648201526084016107b1565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612214908790612d45565b6001600160801b031681526020018583602001516122329190612d45565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156123525760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46123166000888488611b8c565b6123325760405162461bcd60e51b81526004016107b190612cf2565b8161233c81612ee0565b925050808061234a90612ee0565b9150506122c9565b5060008190556116c3565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156123b657507f000000000000000000000000000000000000000000000000000000000000000046145b156123e057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156124bb5760208301516040840151606085015160001a6124af878285856126f5565b945094505050506124ed565b8251604014156124e557602083015160408401516124da8683836127e2565b9350935050506124ed565b506000905060025b9250929050565b600081600481111561251657634e487b7160e01b600052602160045260246000fd5b141561251f5750565b600181600481111561254157634e487b7160e01b600052602160045260246000fd5b141561258f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107b1565b60028160048111156125b157634e487b7160e01b600052602160045260246000fd5b14156125ff5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107b1565b600381600481111561262157634e487b7160e01b600052602160045260246000fd5b141561267a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107b1565b600481600481111561269c57634e487b7160e01b600052602160045260246000fd5b14156110615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016107b1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561272c57506000905060036127d9565b8460ff16601b1415801561274457508460ff16601c14155b1561275557506000905060046127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b6000806001600160ff1b038316816127ff60ff86901c601b612d84565b905061280d878288856126f5565b935093505050935093915050565b82805461282790612ea5565b90600052602060002090601f016020900481019282612849576000855561288f565b82601f106128625782800160ff1982351617855561288f565b8280016001018555821561288f579182015b8281111561288f578235825591602001919060010190612874565b50610e239291505b80821115610e235760008155600101612897565b80356001600160a01b03811681146128c257600080fd5b919050565b60008083601f8401126128d8578182fd5b50813567ffffffffffffffff8111156128ef578182fd5b6020830191508360208285010111156124ed57600080fd5b600060208284031215612918578081fd5b611222826128ab565b60008060408385031215612933578081fd5b61293c836128ab565b915061294a602084016128ab565b90509250929050565b600080600060608486031215612967578081fd5b612970846128ab565b925061297e602085016128ab565b9150604084013590509250925092565b600080600080608085870312156129a3578081fd5b6129ac856128ab565b93506129ba602086016128ab565b925060408501359150606085013567ffffffffffffffff808211156129dd578283fd5b818701915087601f8301126129f0578283fd5b813581811115612a0257612a02612f3b565b604051601f8201601f19908116603f01168101908382118183101715612a2a57612a2a612f3b565b816040528281528a6020848701011115612a42578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612a75578182fd5b612a7e836128ab565b915060208301358015158114612a92578182fd5b809150509250929050565b60008060408385031215612aaf578182fd5b612ab8836128ab565b946020939093013593505050565b600060208284031215612ad7578081fd5b5035919050565b60008060408385031215612af0578182fd5b8235915061294a602084016128ab565b600060208284031215612b11578081fd5b813561122281612f51565b600060208284031215612b2d578081fd5b815161122281612f51565b600080600060408486031215612b4c578283fd5b833567ffffffffffffffff811115612b62578384fd5b612b6e868287016128c7565b909450925050602084013560ff81168114612b87578182fd5b809150509250925092565b60008060208385031215612ba4578182fd5b823567ffffffffffffffff811115612bba578283fd5b612bc6858286016128c7565b90969095509350505050565b60008151808452612bea816020860160208601612e62565b601f01601f19169290920160200192915050565b60008351612c10818460208801612e62565b835190830190612c24818360208801612e62565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c65816017850160208801612e62565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c96816028840160208801612e62565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cd590830184612bd2565b9695505050505050565b6020815260006112226020830184612bd2565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b03808316818516808303821115612c2457612c24612f0f565b600061ffff808316818516808303821115612c2457612c24612f0f565b60008219821115612d9757612d97612f0f565b500190565b600060ff821660ff84168060ff03821115612db957612db9612f0f565b019392505050565b600082612dd057612dd0612f25565b500490565b60006001600160681b0380831681851681830481118215151615612dfb57612dfb612f0f565b02949350505050565b6000816000190483118215151615612e1e57612e1e612f0f565b500290565b60006001600160801b0383811690831681811015612e4357612e43612f0f565b039392505050565b600082821015612e5d57612e5d612f0f565b500390565b60005b83811015612e7d578181015183820152602001612e65565b83811115610e4c5750506000910152565b600081612e9d57612e9d612f0f565b506000190190565b600181811c90821680612eb957607f821691505b60208210811415612eda57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ef457612ef4612f0f565b5060010190565b600082612f0a57612f0a612f25565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461106157600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209f5909b78a2b60f8602171dde349c79e41bb0822de4f82200bbb0f82022c7b4364736f6c63430008040033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80635d4788771161010d578063a0712d68116100a0578063c87b56dd1161006f578063c87b56dd146105ef578063d547741f1461060f578063d7224ba01461062f578063e8a3d48514610645578063e985e9c51461065a57600080fd5b8063a0712d6814610587578063a217fddf1461059a578063a22cb465146105af578063b88d4fde146105cf57600080fd5b806388084605116100dc57806388084605146104b45780638e3695b8146104c957806391d148541461055257806395d89b411461057257600080fd5b80635d478877146104105780636352211e1461045257806370a082311461047257806375b238fc1461049257600080fd5b80632f2ff15d116101855780633ccfd60b116101545780633ccfd60b1461039b57806342842e0e146103b05780634f6ccce7146103d057806355f804b3146103f057600080fd5b80632f2ff15d146103285780632f745c59146103485780632fad121a1461036857806336568abe1461037b57600080fd5b80630f5d66ad116101c15780630f5d66ad146102a457806318160ddd146102b957806323b872dd146102d8578063248a9ca3146102f857600080fd5b806301ffc9a7146101f357806306fdde0314610228578063081812fc1461024a578063095ea7b314610282575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612b00565b6106a3565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023d6106b4565b60405161021f9190612cdf565b34801561025657600080fd5b5061026a610265366004612ac6565b610746565b6040516001600160a01b03909116815260200161021f565b34801561028e57600080fd5b506102a261029d366004612a9d565b6107d6565b005b3480156102b057600080fd5b506102a26108ee565b3480156102c557600080fd5b506000545b60405190815260200161021f565b3480156102e457600080fd5b506102a26102f3366004612953565b610929565b34801561030457600080fd5b506102ca610313366004612ac6565b60009081526008602052604090206001015490565b34801561033457600080fd5b506102a2610343366004612ade565b610934565b34801561035457600080fd5b506102ca610363366004612a9d565b61095a565b6102a2610376366004612b38565b610ac8565b34801561038757600080fd5b506102a2610396366004612ade565b610d14565b3480156103a757600080fd5b506102a2610d92565b3480156103bc57600080fd5b506102a26103cb366004612953565b610daa565b3480156103dc57600080fd5b506102ca6103eb366004612ac6565b610dc5565b3480156103fc57600080fd5b506102a261040b366004612b92565b610e27565b34801561041c57600080fd5b5061044061042b366004612907565b600c6020526000908152604090205460ff1681565b60405160ff909116815260200161021f565b34801561045e57600080fd5b5061026a61046d366004612ac6565b610e52565b34801561047e57600080fd5b506102ca61048d366004612907565b610e64565b34801561049e57600080fd5b506102ca600080516020612f6883398151915281565b3480156104c057600080fd5b506102a2610ef5565b3480156104d557600080fd5b50600d546105169060ff808216916001600160681b036101008204811692600160701b83041691600160781b81049091169061ffff600160e01b9091041685565b6040805195151586526001600160681b03948516602087015292151592850192909252909116606083015261ffff16608082015260a00161021f565b34801561055e57600080fd5b5061021361056d366004612ade565b610f23565b34801561057e57600080fd5b5061023d610f4e565b6102a2610595366004612ac6565b610f5d565b3480156105a657600080fd5b506102ca600081565b3480156105bb57600080fd5b506102a26105ca366004612a63565b611064565b3480156105db57600080fd5b506102a26105ea36600461298e565b611129565b3480156105fb57600080fd5b5061023d61060a366004612ac6565b61115c565b34801561061b57600080fd5b506102a261062a366004612ade565b611229565b34801561063b57600080fd5b506102ca60075481565b34801561065157600080fd5b5061023d61124f565b34801561066657600080fd5b50610213610675366004612921565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60006106ae8261125e565b92915050565b6060600180546106c390612ea5565b80601f01602080910402602001604051908101604052809291908181526020018280546106ef90612ea5565b801561073c5780601f106107115761010080835404028352916020019161073c565b820191906000526020600020905b81548152906001019060200180831161071f57829003601f168201915b5050505050905090565b6000610753826000541190565b6107ba5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107e182610e52565b9050806001600160a01b0316836001600160a01b031614156108505760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016107b1565b336001600160a01b038216148061086c575061086c8133610675565b6108de5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016107b1565b6108e9838383611283565b505050565b600080516020612f6883398151915261090781336112df565b50600d805460ff60701b198116600160701b9182900460ff1615909102179055565b6108e9838383611343565b60008281526008602052604090206001015461095081336112df565b6108e983836116cb565b600061096583610e64565b82106109be5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016107b1565b600080549080805b83811015610a68576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610a1957805192505b876001600160a01b0316836001600160a01b03161415610a555786841415610a47575093506106ae92505050565b83610a5181612ee0565b9450505b5080610a6081612ee0565b9150506109c6565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016107b1565b610ad28383611751565b611b5860ff8216610ae260005490565b610aec9190612d84565b1115610b2e5760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016107b1565b600d54610bb890610b4e9060ff841690600160e01b900461ffff16612d67565b61ffff161115610ba05760405162461bcd60e51b815260206004820152601b60248201527f6578636565642077686974656c697374206d617820737570706c79000000000060448201526064016107b1565b600d805460ff83169190601c90610bc3908490600160e01b900461ffff16612d67565b92506101000a81548161ffff021916908361ffff160217905550600560ff1681600c6000610bee3390565b6001600160a01b03168152602081019190915260400160002054610c15919060ff16612d9c565b60ff161115610c5f5760405162461bcd60e51b81526020600482015260166024820152756578636565642077686974656c6973742071756f746160501b60448201526064016107b1565b336000908152600c602052604081208054839290610c8190849060ff16612d9c565b92506101000a81548160ff021916908360ff16021790555034600d600001600f9054906101000a90046001600160681b03168260ff16610cc19190612dd5565b6001600160681b031614610d075760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b60448201526064016107b1565b6108e9338260ff16611848565b6001600160a01b0381163314610d845760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107b1565b610d8e8282611862565b5050565b600b54610da8906001600160a01b0316476118c9565b565b6108e983838360405180602001604052806000815250611129565b600080548210610e235760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016107b1565b5090565b600080516020612f68833981519152610e4081336112df565b610e4c600a848461281b565b50505050565b6000610e5d826119e2565b5192915050565b60006001600160a01b038216610ed05760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016107b1565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b600080516020612f68833981519152610f0e81336112df565b50600d805460ff19811660ff90911615179055565b60009182526008602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600280546106c390612ea5565b600d5460ff16610fa45760405162461bcd60e51b81526020600482015260126024820152716e6f7420696e207075626c69632073616c6560701b60448201526064016107b1565b611b5881610fb160005490565b610fbb9190612d84565b1115610ffd5760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b60448201526064016107b1565b600d54349061101a9061010090046001600160681b031683612e04565b146110575760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b60448201526064016107b1565b6110613382611848565b50565b6001600160a01b0382163314156110bd5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016107b1565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611134848484611343565b61114084848484611b8c565b610e4c5760405162461bcd60e51b81526004016107b190612cf2565b6060611169826000541190565b6111cd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107b1565b60006111d7611c9a565b905060008151116111f75760405180602001604052806000815250611222565b8061120184611ca9565b604051602001611212929190612bfe565b6040516020818303038152906040525b9392505050565b60008281526008602052604090206001015461124581336112df565b6108e98383611862565b6060600980546106c390612ea5565b60006001600160e01b03198216637965db0b60e01b14806106ae57506106ae82611dc3565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6112e98282610f23565b610d8e57611301816001600160a01b03166014611e2e565b61130c836020611e2e565b60405160200161131d929190612c2d565b60408051601f198184030181529082905262461bcd60e51b82526107b191600401612cdf565b600061134e826119e2565b80519091506000906001600160a01b0316336001600160a01b0316148061138557503361137a84610746565b6001600160a01b0316145b80611397575081516113979033610675565b9050806114015760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107b1565b846001600160a01b031682600001516001600160a01b0316146114755760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016107b1565b6001600160a01b0384166114d95760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107b1565b6114e96000848460000151611283565b6001600160a01b038516600090815260046020526040812080546001929061151b9084906001600160801b0316612e23565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b0386166000908152600460205260408120805460019450909261156791859116612d45565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b031990911691909216171790556115ef846001612d84565b6000818152600360205260409020549091506001600160a01b031661168157611619816000541190565b156116815760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b6116d58282610f23565b610d8e5760008281526008602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561170d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b604080517fdabea70844bf24d9249fbcd43ff305a229af24da603ae5c43f957f44dcbd0bed602082015233918101919091526000906117a89060600160405160208183030381529060405280519060200120612010565b90506117fc600080516020612f6883398151915261056d8386868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061205e92505050565b6108e95760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a656400000000000000000060448201526064016107b1565b610d8e828260405180602001604052806000815250612082565b61186c8282610f23565b15610d8e5760008281526008602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b804710156119195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107b1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611966576040519150601f19603f3d011682016040523d82523d6000602084013e61196b565b606091505b50509050806108e95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107b1565b6040805180820190915260008082526020820152611a01826000541190565b611a605760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016107b1565b60007f00000000000000000000000000000000000000000000000000000000000000008310611ac157611ab37f000000000000000000000000000000000000000000000000000000000000000084612e4b565b611abe906001612d84565b90505b825b818110611b2b576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215611b1857949350505050565b5080611b2381612e8e565b915050611ac3565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b60648201526084016107b1565b60006001600160a01b0384163b15611c8e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611bd0903390899088908890600401612ca2565b602060405180830381600087803b158015611bea57600080fd5b505af1925050508015611c1a575060408051601f3d908101601f19168201909252611c1791810190612b1c565b60015b611c74573d808015611c48576040519150601f19603f3d011682016040523d82523d6000602084013e611c4d565b606091505b508051611c6c5760405162461bcd60e51b81526004016107b190612cf2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c92565b5060015b949350505050565b6060600a80546106c390612ea5565b606081611ccd5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cf75780611ce181612ee0565b9150611cf09050600a83612dc1565b9150611cd1565b60008167ffffffffffffffff811115611d2057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d4a576020820181803683370190505b5090505b8415611c9257611d5f600183612e4b565b9150611d6c600a86612efb565b611d77906030612d84565b60f81b818381518110611d9a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611dbc600a86612dc1565b9450611d4e565b60006001600160e01b031982166380ac58cd60e01b1480611df457506001600160e01b03198216635b5e139f60e01b145b80611e0f57506001600160e01b0319821663780e9d6360e01b145b806106ae57506301ffc9a760e01b6001600160e01b03198316146106ae565b60606000611e3d836002612e04565b611e48906002612d84565b67ffffffffffffffff811115611e6e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e98576020820181803683370190505b509050600360fc1b81600081518110611ec157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611efe57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f22846002612e04565b611f2d906001612d84565b90505b6001811115611fc1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611f6f57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611f9357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611fba81612e8e565b9050611f30565b5083156112225760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107b1565b60006106ae61201d61235d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061206d8585612484565b9150915061207a816124f4565b509392505050565b6000546001600160a01b0384166120e55760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107b1565b6120f0816000541190565b1561213d5760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e74656400000060448201526064016107b1565b7f00000000000000000000000000000000000000000000000000000000000000008311156121b85760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b60648201526084016107b1565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190612214908790612d45565b6001600160801b031681526020018583602001516122329190612d45565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b858110156123525760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46123166000888488611b8c565b6123325760405162461bcd60e51b81526004016107b190612cf2565b8161233c81612ee0565b925050808061234a90612ee0565b9150506122c9565b5060008190556116c3565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156123b657507f000000000000000000000000000000000000000000000000000000000000000046145b156123e057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156124bb5760208301516040840151606085015160001a6124af878285856126f5565b945094505050506124ed565b8251604014156124e557602083015160408401516124da8683836127e2565b9350935050506124ed565b506000905060025b9250929050565b600081600481111561251657634e487b7160e01b600052602160045260246000fd5b141561251f5750565b600181600481111561254157634e487b7160e01b600052602160045260246000fd5b141561258f5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107b1565b60028160048111156125b157634e487b7160e01b600052602160045260246000fd5b14156125ff5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107b1565b600381600481111561262157634e487b7160e01b600052602160045260246000fd5b141561267a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107b1565b600481600481111561269c57634e487b7160e01b600052602160045260246000fd5b14156110615760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016107b1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561272c57506000905060036127d9565b8460ff16601b1415801561274457508460ff16601c14155b1561275557506000905060046127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b6000806001600160ff1b038316816127ff60ff86901c601b612d84565b905061280d878288856126f5565b935093505050935093915050565b82805461282790612ea5565b90600052602060002090601f016020900481019282612849576000855561288f565b82601f106128625782800160ff1982351617855561288f565b8280016001018555821561288f579182015b8281111561288f578235825591602001919060010190612874565b50610e239291505b80821115610e235760008155600101612897565b80356001600160a01b03811681146128c257600080fd5b919050565b60008083601f8401126128d8578182fd5b50813567ffffffffffffffff8111156128ef578182fd5b6020830191508360208285010111156124ed57600080fd5b600060208284031215612918578081fd5b611222826128ab565b60008060408385031215612933578081fd5b61293c836128ab565b915061294a602084016128ab565b90509250929050565b600080600060608486031215612967578081fd5b612970846128ab565b925061297e602085016128ab565b9150604084013590509250925092565b600080600080608085870312156129a3578081fd5b6129ac856128ab565b93506129ba602086016128ab565b925060408501359150606085013567ffffffffffffffff808211156129dd578283fd5b818701915087601f8301126129f0578283fd5b813581811115612a0257612a02612f3b565b604051601f8201601f19908116603f01168101908382118183101715612a2a57612a2a612f3b565b816040528281528a6020848701011115612a42578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612a75578182fd5b612a7e836128ab565b915060208301358015158114612a92578182fd5b809150509250929050565b60008060408385031215612aaf578182fd5b612ab8836128ab565b946020939093013593505050565b600060208284031215612ad7578081fd5b5035919050565b60008060408385031215612af0578182fd5b8235915061294a602084016128ab565b600060208284031215612b11578081fd5b813561122281612f51565b600060208284031215612b2d578081fd5b815161122281612f51565b600080600060408486031215612b4c578283fd5b833567ffffffffffffffff811115612b62578384fd5b612b6e868287016128c7565b909450925050602084013560ff81168114612b87578182fd5b809150509250925092565b60008060208385031215612ba4578182fd5b823567ffffffffffffffff811115612bba578283fd5b612bc6858286016128c7565b90969095509350505050565b60008151808452612bea816020860160208601612e62565b601f01601f19169290920160200192915050565b60008351612c10818460208801612e62565b835190830190612c24818360208801612e62565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612c65816017850160208801612e62565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c96816028840160208801612e62565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612cd590830184612bd2565b9695505050505050565b6020815260006112226020830184612bd2565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b03808316818516808303821115612c2457612c24612f0f565b600061ffff808316818516808303821115612c2457612c24612f0f565b60008219821115612d9757612d97612f0f565b500190565b600060ff821660ff84168060ff03821115612db957612db9612f0f565b019392505050565b600082612dd057612dd0612f25565b500490565b60006001600160681b0380831681851681830481118215151615612dfb57612dfb612f0f565b02949350505050565b6000816000190483118215151615612e1e57612e1e612f0f565b500290565b60006001600160801b0383811690831681811015612e4357612e43612f0f565b039392505050565b600082821015612e5d57612e5d612f0f565b500390565b60005b83811015612e7d578181015183820152602001612e65565b83811115610e4c5750506000910152565b600081612e9d57612e9d612f0f565b506000190190565b600181811c90821680612eb957607f821691505b60208210811415612eda57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ef457612ef4612f0f565b5060010190565b600082612f0a57612f0a612f25565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461106157600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212209f5909b78a2b60f8602171dde349c79e41bb0822de4f82200bbb0f82022c7b4364736f6c63430008040033",
  "devdoc": {
    "author": "Japan NFT Culture Association (https://www.jnca.io)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Setup contractURI, initial base URI, ERC721"
      },
      "flipPublicSale()": {
        "details": "Flip public sale state"
      },
      "flipWhitelistSale()": {
        "details": "Flip whitelist sale state"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Change base URI to reveal NFT"
      },
      "supportsInterface(bytes4)": {
        "details": "Override interface"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw()": {
        "details": "Withdraw fund from contract to receiver"
      }
    },
    "title": "Artwork NFT by Yayoi Kusama",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Contract info read by marketplace"
      },
      "mint(uint256)": {
        "notice": "Mint certain amount of tokens"
      },
      "whitelistMint(bytes,uint8)": {
        "notice": "Mint for whitelist (EIP712)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1730,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1736,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1738,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1743,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)1722_storage)"
      },
      {
        "astId": 1748,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)1727_storage)"
      },
      {
        "astId": 1752,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1758,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2701,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_roles",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2914,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_contractURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2916,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2918,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_fundReceiver",
        "offset": 0,
        "slot": "11",
        "type": "t_address_payable"
      },
      {
        "astId": 2922,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "whitelistAlreadyMinted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 2936,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "saleInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(SaleInfo)2933_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)1727_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)1727_storage"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)1722_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)1722_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)1727_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 1724,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1726,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SaleInfo)2933_storage": {
        "encoding": "inplace",
        "label": "struct YayoiKusamaHandbagArtwork.SaleInfo",
        "members": [
          {
            "astId": 2924,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "isPublic",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2926,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "publicPrice",
            "offset": 1,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 2928,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "isWhitelist",
            "offset": 14,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2930,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "whitelistPrice",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 2932,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "whitelistSupply",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)1722_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 1719,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1721,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}