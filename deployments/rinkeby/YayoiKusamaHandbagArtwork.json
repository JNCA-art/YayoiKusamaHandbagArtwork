{
  "address": "0x8B9d86A77Cc1Cd41374D3045692Fb706FdaE0452",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initContractURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint104",
          "name": "publicPrice",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "whitelistPrice",
          "type": "uint104"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPublicSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipWhitelistSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOwnerToExplicitlySet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        },
        {
          "internalType": "uint104",
          "name": "publicPrice",
          "type": "uint104"
        },
        {
          "internalType": "bool",
          "name": "isWhitelist",
          "type": "bool"
        },
        {
          "internalType": "uint104",
          "name": "whitelistPrice",
          "type": "uint104"
        },
        {
          "internalType": "uint16",
          "name": "whitelistSupply",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPublic",
              "type": "bool"
            },
            {
              "internalType": "uint104",
              "name": "publicPrice",
              "type": "uint104"
            },
            {
              "internalType": "bool",
              "name": "isWhitelist",
              "type": "bool"
            },
            {
              "internalType": "uint104",
              "name": "whitelistPrice",
              "type": "uint104"
            },
            {
              "internalType": "uint16",
              "name": "whitelistSupply",
              "type": "uint16"
            }
          ],
          "internalType": "struct YayoiKusamaHandbagArtwork.SaleInfo",
          "name": "newSaleInfo",
          "type": "tuple"
        }
      ],
      "name": "updateSaleInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistAlreadyMinted",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "whitelistMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe11896ab2ac87dc9aeaebadad56c21f93ca52c3fe98ee8bbe6784ddcd3136d12",
  "receipt": {
    "to": null,
    "from": "0x4d3b9625656af699F53D364A980Ea78bb6035978",
    "contractAddress": "0x8B9d86A77Cc1Cd41374D3045692Fb706FdaE0452",
    "transactionIndex": 12,
    "gasUsed": "2832760",
    "logsBloom": "0x
    "blockHash": "0xc6960c60e141d1de13ca15dbe5cdfea08d16180b23c900e4528fd2277f5994f4",
    "transactionHash": "0xe11896ab2ac87dc9aeaebadad56c21f93ca52c3fe98ee8bbe6784ddcd3136d12",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10286654,
        "transactionHash": "0xe11896ab2ac87dc9aeaebadad56c21f93ca52c3fe98ee8bbe6784ddcd3136d12",
        "address": "0x8B9d86A77Cc1Cd41374D3045692Fb706FdaE0452",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004d3b9625656af699f53d364a980ea78bb6035978"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xc6960c60e141d1de13ca15dbe5cdfea08d16180b23c900e4528fd2277f5994f4"
      }
    ],
    "blockNumber": 10286654,
    "cumulativeGasUsed": "4088267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmbhxP5ubdK1B8c5S5PkKiLoUeatGd9zfQA57PWbnE2iyX",
    "ipfs://QmazDA25V9CyL55vuPJqqAH7dMe5TtAWjH2KdzXKHminH5/",
    "0xFC377879e83bc8E247E10B316aFbD00A9D165d16",
    "12000000000000000",
    "10000000000000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "280caa205e72277e37f7f8ccf85a0d1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initContractURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint104\",\"name\":\"publicPrice\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"whitelistPrice\",\"type\":\"uint104\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"publicPrice\",\"type\":\"uint104\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"whitelistPrice\",\"type\":\"uint104\"},{\"internalType\":\"uint16\",\"name\":\"whitelistSupply\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"publicPrice\",\"type\":\"uint104\"},{\"internalType\":\"bool\",\"name\":\"isWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint104\",\"name\":\"whitelistPrice\",\"type\":\"uint104\"},{\"internalType\":\"uint16\",\"name\":\"whitelistSupply\",\"type\":\"uint16\"}],\"internalType\":\"struct YayoiKusamaHandbagArtwork.SaleInfo\",\"name\":\"newSaleInfo\",\"type\":\"tuple\"}],\"name\":\"updateSaleInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAlreadyMinted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Japan NFT Culture Association (https://www.jnca.io)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Setup contractURI, initial base URI, ERC721\"},\"flipPublicSale()\":{\"details\":\"Flip public sale state\"},\"flipWhitelistSale()\":{\"details\":\"Flip whitelist sale state\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Change base URI to reveal NFT\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSaleInfo((bool,uint104,bool,uint104,uint16))\":{\"details\":\"Update sale info (without changing whitelist supply)\"},\"withdraw()\":{\"details\":\"Withdraw fund from contract to receiver\"}},\"title\":\"Artwork NFT by Yayoi Kusama\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Contract info read by marketplace\"},\"mint(uint256)\":{\"notice\":\"Mint certain amount of tokens\"},\"whitelistMint(bytes,uint8)\":{\"notice\":\"Mint for whitelist (EIP712)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YayoiKusamaHandbagArtwork.sol\":\"YayoiKusamaHandbagArtwork\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\\n *\\n * Does not support burning tokens to address(0).\\n */\\ncontract ERC721A is\\n    Context,\\n    ERC165,\\n    IERC721,\\n    IERC721Metadata,\\n    IERC721Enumerable\\n{\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    struct TokenOwnership {\\n        address addr;\\n        uint64 startTimestamp;\\n    }\\n\\n    struct AddressData {\\n        uint128 balance;\\n        uint128 numberMinted;\\n    }\\n\\n    uint256 private currentIndex = 0;\\n\\n    uint256 internal immutable collectionSize;\\n    uint256 internal immutable maxBatchSize;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) private _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev\\n     * `maxBatchSize` refers to how much a minter can mint at a time.\\n     * `collectionSize_` refers to how many tokens are in the collection.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 maxBatchSize_,\\n        uint256 collectionSize_\\n    ) {\\n        require(\\n            collectionSize_ > 0,\\n            \\\"ERC721A: collection must have a nonzero supply\\\"\\n        );\\n        require(maxBatchSize_ > 0, \\\"ERC721A: max batch size must be nonzero\\\");\\n        _name = name_;\\n        _symbol = symbol_;\\n        maxBatchSize = maxBatchSize_;\\n        collectionSize = collectionSize_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return currentIndex;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < totalSupply(), \\\"ERC721A: global index out of bounds\\\");\\n        return index;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(index < balanceOf(owner), \\\"ERC721A: owner index out of bounds\\\");\\n        uint256 numMintedSoFar = totalSupply();\\n        uint256 tokenIdsIdx = 0;\\n        address currOwnershipAddr = address(0);\\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\\n            TokenOwnership memory ownership = _ownerships[i];\\n            if (ownership.addr != address(0)) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            if (currOwnershipAddr == owner) {\\n                if (tokenIdsIdx == index) {\\n                    return i;\\n                }\\n                tokenIdsIdx++;\\n            }\\n        }\\n        revert(\\\"ERC721A: unable to get token of owner by index\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: balance query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721A: number minted query for the zero address\\\"\\n        );\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function ownershipOf(uint256 tokenId)\\n        internal\\n        view\\n        returns (TokenOwnership memory)\\n    {\\n        require(_exists(tokenId), \\\"ERC721A: owner query for nonexistent token\\\");\\n\\n        uint256 lowestTokenToCheck;\\n        if (tokenId >= maxBatchSize) {\\n            lowestTokenToCheck = tokenId - maxBatchSize + 1;\\n        }\\n\\n        for (uint256 curr = tokenId; curr >= lowestTokenToCheck; curr--) {\\n            TokenOwnership memory ownership = _ownerships[curr];\\n            if (ownership.addr != address(0)) {\\n                return ownership;\\n            }\\n        }\\n\\n        revert(\\\"ERC721A: unable to determine the owner of token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\n        );\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721A: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721A: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721A: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721A: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public override {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < currentIndex;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - there must be `quantity` tokens remaining unminted in the total collection.\\n     * - `to` cannot be the zero address.\\n     * - `quantity` cannot be larger than the max batch size.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        uint256 startTokenId = currentIndex;\\n        require(to != address(0), \\\"ERC721A: mint to the zero address\\\");\\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\\n        require(!_exists(startTokenId), \\\"ERC721A: token already minted\\\");\\n        require(quantity <= maxBatchSize, \\\"ERC721A: quantity to mint too high\\\");\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        AddressData memory addressData = _addressData[to];\\n        _addressData[to] = AddressData(\\n            addressData.balance + uint128(quantity),\\n            addressData.numberMinted + uint128(quantity)\\n        );\\n        _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        uint256 updatedIndex = startTokenId;\\n\\n        for (uint256 i = 0; i < quantity; i++) {\\n            emit Transfer(address(0), to, updatedIndex);\\n            require(\\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\\n                \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n            );\\n            updatedIndex++;\\n        }\\n\\n        currentIndex = updatedIndex;\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            getApproved(tokenId) == _msgSender() ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\\n\\n        require(\\n            isApprovedOrOwner,\\n            \\\"ERC721A: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        require(\\n            prevOwnership.addr == from,\\n            \\\"ERC721A: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721A: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        _addressData[from].balance -= 1;\\n        _addressData[to].balance += 1;\\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\\n\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n        uint256 nextTokenId = tokenId + 1;\\n        if (_ownerships[nextTokenId].addr == address(0)) {\\n            if (_exists(nextTokenId)) {\\n                _ownerships[nextTokenId] = TokenOwnership(\\n                    prevOwnership.addr,\\n                    prevOwnership.startTimestamp\\n                );\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    uint256 public nextOwnerToExplicitlySet = 0;\\n\\n    /**\\n     * @dev Explicitly set `owners` to eliminate loops in future calls of ownerOf().\\n     */\\n    function _setOwnersExplicit(uint256 quantity) internal {\\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\\n        require(quantity > 0, \\\"quantity must be nonzero\\\");\\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\\n        if (endIndex > collectionSize - 1) {\\n            endIndex = collectionSize - 1;\\n        }\\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\\n        require(_exists(endIndex), \\\"not enough minted yet for this cleanup\\\");\\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\\n            if (_ownerships[i].addr == address(0)) {\\n                TokenOwnership memory ownership = ownershipOf(i);\\n                _ownerships[i] = TokenOwnership(\\n                    ownership.addr,\\n                    ownership.startTimestamp\\n                );\\n            }\\n        }\\n        nextOwnerToExplicitlySet = endIndex + 1;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721A: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x6390d88e281b3e9e63206b33dd0b3b3f4cff2d7b4fab1598ab1709aaaa5df1ae\",\"license\":\"MIT\"},\"contracts/YayoiKusamaHandbagArtwork.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./ERC721A.sol\\\";\\n\\n/**\\n @title Artwork NFT by Yayoi Kusama\\n @author Japan NFT Culture Association (https://www.jnca.io)\\n */\\ncontract YayoiKusamaHandbagArtwork is ERC721A, EIP712, Ownable {\\n    uint16 private constant MAX_SUPPLY = 7000;\\n\\n    uint16 private constant WHITELIST_MAX_SUPPLY = 3000;\\n\\n    uint8 private constant BATCH_MINT_SIZE = 5;\\n\\n    string private _contractURI;\\n\\n    string private _tokenBaseURI;\\n\\n    address payable private _fundReceiver;\\n\\n    mapping(address => uint8) public whitelistAlreadyMinted;\\n\\n    struct SaleInfo {\\n        bool isPublic;\\n        uint104 publicPrice;\\n        bool isWhitelist;\\n        uint104 whitelistPrice;\\n        uint16 whitelistSupply;\\n    }\\n    SaleInfo public saleInfo;\\n\\n    // voucher for user to redeem\\n    struct NFTVoucher {\\n        address redeemer; // specify user to redeem this voucher\\n    }\\n\\n    /// @dev Setup contractURI, initial base URI, ERC721\\n    constructor(\\n        string memory initContractURI,\\n        string memory initBaseURI,\\n        address payable receiver,\\n        uint104 publicPrice,\\n        uint104 whitelistPrice\\n    )\\n        ERC721A(\\n            \\\"Yayoi Kusama Handbag Artwork\\\",\\n            \\\"YKHA\\\",\\n            BATCH_MINT_SIZE,\\n            MAX_SUPPLY\\n        )\\n        EIP712(\\\"YKHA\\\", \\\"1\\\")\\n    {\\n        _contractURI = initContractURI;\\n        _tokenBaseURI = initBaseURI;\\n        _fundReceiver = receiver;\\n        saleInfo.isPublic = false;\\n        saleInfo.publicPrice = publicPrice;\\n        saleInfo.isWhitelist = false;\\n        saleInfo.whitelistPrice = whitelistPrice;\\n        saleInfo.whitelistSupply = 0;\\n    }\\n\\n    /// @notice Contract info read by marketplace\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /// @notice Mint certain amount of tokens\\n    function mint(uint256 amount) external payable {\\n        require(saleInfo.isPublic, \\\"not in public sale\\\");\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"exceed max supply\\\");\\n        require(amount * saleInfo.publicPrice == msg.value, \\\"payment error\\\");\\n        _safeMint(_msgSender(), amount);\\n    }\\n\\n    /// @notice Mint for whitelist (EIP712)\\n    function whitelistMint(bytes calldata signature, uint8 amount)\\n        external\\n        payable\\n    {\\n        _verify(signature);\\n        require(saleInfo.isWhitelist, \\\"not in whitelist sale\\\");\\n        require(totalSupply() + amount <= MAX_SUPPLY, \\\"exceed max supply\\\");\\n        require(\\n            saleInfo.whitelistSupply + amount <= WHITELIST_MAX_SUPPLY,\\n            \\\"exceed whitelist max supply\\\"\\n        );\\n        saleInfo.whitelistSupply += amount;\\n        require(\\n            whitelistAlreadyMinted[_msgSender()] + amount <= BATCH_MINT_SIZE,\\n            \\\"exceed whitelist quota\\\"\\n        );\\n        whitelistAlreadyMinted[_msgSender()] += amount;\\n        require(amount * saleInfo.whitelistPrice == msg.value, \\\"payment error\\\");\\n        _safeMint(_msgSender(), amount);\\n    }\\n\\n    /// @dev Withdraw fund from contract to receiver\\n    function withdraw() external {\\n        Address.sendValue(_fundReceiver, address(this).balance);\\n    }\\n\\n    /// @dev Change base URI to reveal NFT\\n    function setBaseURI(string calldata newBaseURI)\\n        external\\n        onlyOwner\\n    {\\n        _tokenBaseURI = newBaseURI;\\n    }\\n\\n    /// @dev Flip public sale state\\n    function flipPublicSale() external onlyOwner {\\n        saleInfo.isPublic = !saleInfo.isPublic;\\n    }\\n\\n    /// @dev Flip whitelist sale state\\n    function flipWhitelistSale() external onlyOwner {\\n        saleInfo.isWhitelist = !saleInfo.isWhitelist;\\n    }\\n\\n    /// @dev Update sale info (without changing whitelist supply)\\n    function updateSaleInfo(SaleInfo calldata newSaleInfo) external onlyOwner {\\n        saleInfo.isPublic = newSaleInfo.isPublic;\\n        saleInfo.publicPrice = newSaleInfo.publicPrice;\\n        saleInfo.isWhitelist = newSaleInfo.isWhitelist;\\n        saleInfo.whitelistPrice = newSaleInfo.whitelistPrice;\\n    }\\n\\n    /// @dev Override ERC721._baseURI\\n    function _baseURI() internal view override returns (string memory) {\\n        return _tokenBaseURI;\\n    }\\n\\n    /// @dev Verify voucher\\n    function _verify(bytes calldata signature) private view {\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"NFTVoucher(address redeemer)\\\"),\\n                    _msgSender()\\n                )\\n            )\\n        );\\n        require(\\n            owner() == ECDSA.recover(digest, signature),\\n            \\\"invalid or unauthorized\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xca775f5d51a930740c872c4616f07877b269a007f22bbd3abfc23bba25c95581\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040526000805560006007553480156200001b57600080fd5b506040516200333c3803806200333c8339810160408190526200003e9162000481565b604080518082018252600480825263594b484160e01b60208084018290528451808601865260018152603160f81b8183015285518087018752601c81527f5961796f69204b7573616d612048616e6462616720417274776f726b000000008184015286518088019097529386529085019190915291926005611b58620000c8565b60405180910390fd5b600082116200012a5760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b6064820152608401620000bf565b83516200013f9060019060208701906200030b565b508251620001559060029060208601906200030b565b5060a091909152608052505081516020838101919091208251918301919091206101208290526101408190524660e0527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001f68184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60c0523060601b6101005261016052506200021d9250620002179150503390565b620002b9565b8451620002329060099060208801906200030b565b5083516200024890600a9060208701906200030b565b50600b80546001600160a01b0319166001600160a01b039490941693909317909255600d80546001600160e01b0319166101006001600160681b0393841602600160701b600160e01b03191617600160781b92909316919091029190911761ffff60e01b1916905550620005819050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000319906200052e565b90600052602060002090601f0160209004810192826200033d576000855562000388565b82601f106200035857805160ff191683800117855562000388565b8280016001018555821562000388579182015b82811115620003885782518255916020019190600101906200036b565b50620003969291506200039a565b5090565b5b808211156200039657600081556001016200039b565b600082601f830112620003c2578081fd5b81516001600160401b0380821115620003df57620003df6200056b565b604051601f8301601f19908116603f011681019082821181831017156200040a576200040a6200056b565b8160405283815260209250868385880101111562000426578485fd5b8491505b838210156200044957858201830151818301840152908201906200042a565b838211156200045a57848385830101525b9695505050505050565b80516001600160681b03811681146200047c57600080fd5b919050565b600080600080600060a0868803121562000499578081fd5b85516001600160401b0380821115620004b0578283fd5b620004be89838a01620003b1565b96506020880151915080821115620004d4578283fd5b50620004e388828901620003b1565b604088015190955090506001600160a01b038116811462000502578182fd5b9250620005126060870162000464565b9150620005226080870162000464565b90509295509295909350565b600181811c908216806200054357607f821691505b602082108114156200056557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160e0516101005160601c610120516101405161016051612d47620005f560003960006121a2015260006121f1015260006121cc015260006121250152600061214f01526000612179015260008181611a1a01528181611a440152611efa015260005050612d476000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063a22cb46511610095578063d7224ba011610064578063d7224ba01461057a578063e8a3d48514610590578063e985e9c5146105a5578063f2fde38b146105ee57600080fd5b8063a22cb465146104fa578063a60cc5171461051a578063b88d4fde1461053a578063c87b56dd1461055a57600080fd5b80638da5cb5b116100d15780638da5cb5b1461042b5780638e3695b81461044957806395d89b41146104d2578063a0712d68146104e757600080fd5b806370a08231146103e1578063715018a614610401578063880846051461041657600080fd5b80632f745c591161016f5780634f6ccce71161013e5780634f6ccce71461033f57806355f804b31461035f5780635d4788771461037f5780636352211e146103c157600080fd5b80632f745c59146102d75780632fad121a146102f75780633ccfd60b1461030a57806342842e0e1461031f57600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630f5d66ad1461028357806318160ddd1461029857806323b872dd146102b757600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed36600461289a565b61060e565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c61067b565b6040516101fe9190612a5a565b34801561023557600080fd5b506102496102443660046129aa565b61070d565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004612857565b61079d565b005b34801561028f57600080fd5b506102816108b5565b3480156102a457600080fd5b506000545b6040519081526020016101fe565b3480156102c357600080fd5b506102816102d236600461271e565b610900565b3480156102e357600080fd5b506102a96102f2366004612857565b61090b565b6102816103053660046128d2565b610a79565b34801561031657600080fd5b50610281610d16565b34801561032b57600080fd5b5061028161033a36600461271e565b610d2e565b34801561034b57600080fd5b506102a961035a3660046129aa565b610d49565b34801561036b57600080fd5b5061028161037a36600461292c565b610dab565b34801561038b57600080fd5b506103af61039a3660046126d2565b600c6020526000908152604090205460ff1681565b60405160ff90911681526020016101fe565b3480156103cd57600080fd5b506102496103dc3660046129aa565b610de1565b3480156103ed57600080fd5b506102a96103fc3660046126d2565b610df3565b34801561040d57600080fd5b50610281610e84565b34801561042257600080fd5b50610281610eb8565b34801561043757600080fd5b506008546001600160a01b0316610249565b34801561045557600080fd5b50600d546104969060ff808216916001600160681b036101008204811692600160701b83041691600160781b81049091169061ffff600160e01b9091041685565b6040805195151586526001600160681b03948516602087015292151592850192909252909116606083015261ffff16608082015260a0016101fe565b3480156104de57600080fd5b5061021c610ef6565b6102816104f53660046129aa565b610f05565b34801561050657600080fd5b5061028161051536600461282e565b61100c565b34801561052657600080fd5b5061028161053536600461296c565b6110d1565b34801561054657600080fd5b50610281610555366004612759565b6111c6565b34801561056657600080fd5b5061021c6105753660046129aa565b6111ff565b34801561058657600080fd5b506102a960075481565b34801561059c57600080fd5b5061021c6112cc565b3480156105b157600080fd5b506101f26105c03660046126ec565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156105fa57600080fd5b506102816106093660046126d2565b6112db565b60006001600160e01b031982166380ac58cd60e01b148061063f57506001600160e01b03198216635b5e139f60e01b145b8061065a57506001600160e01b0319821663780e9d6360e01b145b8061067557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461068a90612c55565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690612c55565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050905090565b600061071a826000541190565b6107815760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107a882610de1565b9050806001600160a01b0316836001600160a01b031614156108175760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610778565b336001600160a01b0382161480610833575061083381336105c0565b6108a55760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610778565b6108b0838383611373565b505050565b6008546001600160a01b031633146108df5760405162461bcd60e51b815260040161077890612a6d565b600d805460ff60701b198116600160701b9182900460ff1615909102179055565b6108b08383836113cf565b600061091683610df3565b821061096f5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610778565b600080549080805b83811015610a19576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156109ca57805192505b876001600160a01b0316836001600160a01b03161415610a0657868414156109f85750935061067592505050565b83610a0281612c8a565b9450505b5080610a1181612c8a565b915050610977565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610778565b610a838383611757565b600d54600160701b900460ff16610ad45760405162461bcd60e51b81526020600482015260156024820152746e6f7420696e2077686974656c6973742073616c6560581b6044820152606401610778565b611b5860ff8216610ae460005490565b610aee9190612b34565b1115610b305760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b6044820152606401610778565b600d54610bb890610b509060ff841690600160e01b900461ffff16612b17565b61ffff161115610ba25760405162461bcd60e51b815260206004820152601b60248201527f6578636565642077686974656c697374206d617820737570706c7900000000006044820152606401610778565b600d805460ff83169190601c90610bc5908490600160e01b900461ffff16612b17565b92506101000a81548161ffff021916908361ffff160217905550600560ff1681600c6000610bf03390565b6001600160a01b03168152602081019190915260400160002054610c17919060ff16612b4c565b60ff161115610c615760405162461bcd60e51b81526020600482015260166024820152756578636565642077686974656c6973742071756f746160501b6044820152606401610778565b336000908152600c602052604081208054839290610c8390849060ff16612b4c565b92506101000a81548160ff021916908360ff16021790555034600d600001600f9054906101000a90046001600160681b03168260ff16610cc39190612b85565b6001600160681b031614610d095760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b6044820152606401610778565b6108b0338260ff16611861565b600b54610d2c906001600160a01b03164761187f565b565b6108b0838383604051806020016040528060008152506111c6565b600080548210610da75760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610778565b5090565b6008546001600160a01b03163314610dd55760405162461bcd60e51b815260040161077890612a6d565b6108b0600a83836125d6565b6000610dec82611998565b5192915050565b60006001600160a01b038216610e5f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610778565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6008546001600160a01b03163314610eae5760405162461bcd60e51b815260040161077890612a6d565b610d2c6000611b42565b6008546001600160a01b03163314610ee25760405162461bcd60e51b815260040161077890612a6d565b600d805460ff19811660ff90911615179055565b60606002805461068a90612c55565b600d5460ff16610f4c5760405162461bcd60e51b81526020600482015260126024820152716e6f7420696e207075626c69632073616c6560701b6044820152606401610778565b611b5881610f5960005490565b610f639190612b34565b1115610fa55760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b6044820152606401610778565b600d543490610fc29061010090046001600160681b031683612bb4565b14610fff5760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b6044820152606401610778565b6110093382611861565b50565b6001600160a01b0382163314156110655760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610778565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146110fb5760405162461bcd60e51b815260040161077890612a6d565b6111086020820182612880565b600d805460ff19169115159190911790556111296040820160208301612983565b600d80546001600160681b0392909216610100026dffffffffffffffffffffffffff00199092169190911790556111666060820160408301612880565b600d8054911515600160701b0260ff60701b199092169190911790556111926080820160608301612983565b600d80546001600160681b0392909216600160781b026cffffffffffffffffffffffffff60781b1990921691909117905550565b6111d18484846113cf565b6111dd84848484611b94565b6111f95760405162461bcd60e51b815260040161077890612aa2565b50505050565b606061120c826000541190565b6112705760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610778565b600061127a611ca2565b9050600081511161129a57604051806020016040528060008152506112c5565b806112a484611cb1565b6040516020016112b59291906129ee565b6040516020818303038152906040525b9392505050565b60606009805461068a90612c55565b6008546001600160a01b031633146113055760405162461bcd60e51b815260040161077890612a6d565b6001600160a01b03811661136a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b61100981611b42565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006113da82611998565b80519091506000906001600160a01b0316336001600160a01b031614806114115750336114068461070d565b6001600160a01b0316145b806114235750815161142390336105c0565b90508061148d5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610778565b846001600160a01b031682600001516001600160a01b0316146115015760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610778565b6001600160a01b0384166115655760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610778565b6115756000848460000151611373565b6001600160a01b03851660009081526004602052604081208054600192906115a79084906001600160801b0316612bd3565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038616600090815260046020526040812080546001945090926115f391859116612af5565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561167b846001612b34565b6000818152600360205260409020549091506001600160a01b031661170d576116a5816000541190565b1561170d5760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b604080517fdabea70844bf24d9249fbcd43ff305a229af24da603ae5c43f957f44dcbd0bed602082015233918101919091526000906117ae9060600160405160208183030381529060405280519060200120611dcb565b90506117f08184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1992505050565b6001600160a01b031661180b6008546001600160a01b031690565b6001600160a01b0316146108b05760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a65640000000000000000006044820152606401610778565b61187b828260405180602001604052806000815250611e3d565b5050565b804710156118cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610778565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461191c576040519150601f19603f3d011682016040523d82523d6000602084013e611921565b606091505b50509050806108b05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610778565b60408051808201909152600080825260208201526119b7826000541190565b611a165760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610778565b60007f00000000000000000000000000000000000000000000000000000000000000008310611a7757611a697f000000000000000000000000000000000000000000000000000000000000000084612bfb565b611a74906001612b34565b90505b825b818110611ae1576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215611ace57949350505050565b5080611ad981612c3e565b915050611a79565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610778565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611c9657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611bd8903390899088908890600401612a1d565b602060405180830381600087803b158015611bf257600080fd5b505af1925050508015611c22575060408051601f3d908101601f19168201909252611c1f918101906128b6565b60015b611c7c573d808015611c50576040519150601f19603f3d011682016040523d82523d6000602084013e611c55565b606091505b508051611c745760405162461bcd60e51b815260040161077890612aa2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c9a565b5060015b949350505050565b6060600a805461068a90612c55565b606081611cd55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cff5780611ce981612c8a565b9150611cf89050600a83612b71565b9150611cd9565b60008167ffffffffffffffff811115611d2857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d52576020820181803683370190505b5090505b8415611c9a57611d67600183612bfb565b9150611d74600a86612ca5565b611d7f906030612b34565b60f81b818381518110611da257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611dc4600a86612b71565b9450611d56565b6000610675611dd8612118565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611e28858561223f565b91509150611e35816122af565b509392505050565b6000546001600160a01b038416611ea05760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610778565b611eab816000541190565b15611ef85760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610778565b7f0000000000000000000000000000000000000000000000000000000000000000831115611f735760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610778565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190611fcf908790612af5565b6001600160801b03168152602001858360200151611fed9190612af5565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b8581101561210d5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46120d16000888488611b94565b6120ed5760405162461bcd60e51b815260040161077890612aa2565b816120f781612c8a565b925050808061210590612c8a565b915050612084565b50600081905561174f565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561217157507f000000000000000000000000000000000000000000000000000000000000000046145b1561219b57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156122765760208301516040840151606085015160001a61226a878285856124b0565b945094505050506122a8565b8251604014156122a0576020830151604084015161229586838361259d565b9350935050506122a8565b506000905060025b9250929050565b60008160048111156122d157634e487b7160e01b600052602160045260246000fd5b14156122da5750565b60018160048111156122fc57634e487b7160e01b600052602160045260246000fd5b141561234a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610778565b600281600481111561236c57634e487b7160e01b600052602160045260246000fd5b14156123ba5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610778565b60038160048111156123dc57634e487b7160e01b600052602160045260246000fd5b14156124355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610778565b600481600481111561245757634e487b7160e01b600052602160045260246000fd5b14156110095760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610778565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124e75750600090506003612594565b8460ff16601b141580156124ff57508460ff16601c14155b156125105750600090506004612594565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612564573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661258d57600060019250925050612594565b9150600090505b94509492505050565b6000806001600160ff1b038316816125ba60ff86901c601b612b34565b90506125c8878288856124b0565b935093505050935093915050565b8280546125e290612c55565b90600052602060002090601f016020900481019282612604576000855561264a565b82601f1061261d5782800160ff1982351617855561264a565b8280016001018555821561264a579182015b8281111561264a57823582559160200191906001019061262f565b50610da79291505b80821115610da75760008155600101612652565b80356001600160a01b038116811461267d57600080fd5b919050565b8035801515811461267d57600080fd5b60008083601f8401126126a3578182fd5b50813567ffffffffffffffff8111156126ba578182fd5b6020830191508360208285010111156122a857600080fd5b6000602082840312156126e3578081fd5b6112c582612666565b600080604083850312156126fe578081fd5b61270783612666565b915061271560208401612666565b90509250929050565b600080600060608486031215612732578081fd5b61273b84612666565b925061274960208501612666565b9150604084013590509250925092565b6000806000806080858703121561276e578081fd5b61277785612666565b935061278560208601612666565b925060408501359150606085013567ffffffffffffffff808211156127a8578283fd5b818701915087601f8301126127bb578283fd5b8135818111156127cd576127cd612ce5565b604051601f8201601f19908116603f011681019083821181831017156127f5576127f5612ce5565b816040528281528a602084870101111561280d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612840578182fd5b61284983612666565b915061271560208401612682565b60008060408385031215612869578182fd5b61287283612666565b946020939093013593505050565b600060208284031215612891578081fd5b6112c582612682565b6000602082840312156128ab578081fd5b81356112c581612cfb565b6000602082840312156128c7578081fd5b81516112c581612cfb565b6000806000604084860312156128e6578283fd5b833567ffffffffffffffff8111156128fc578384fd5b61290886828701612692565b909450925050602084013560ff81168114612921578182fd5b809150509250925092565b6000806020838503121561293e578182fd5b823567ffffffffffffffff811115612954578283fd5b61296085828601612692565b90969095509350505050565b600060a0828403121561297d578081fd5b50919050565b600060208284031215612994578081fd5b81356001600160681b03811681146112c5578182fd5b6000602082840312156129bb578081fd5b5035919050565b600081518084526129da816020860160208601612c12565b601f01601f19169290920160200192915050565b60008351612a00818460208801612c12565b835190830190612a14818360208801612c12565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a50908301846129c2565b9695505050505050565b6020815260006112c560208301846129c2565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b03808316818516808303821115612a1457612a14612cb9565b600061ffff808316818516808303821115612a1457612a14612cb9565b60008219821115612b4757612b47612cb9565b500190565b600060ff821660ff84168060ff03821115612b6957612b69612cb9565b019392505050565b600082612b8057612b80612ccf565b500490565b60006001600160681b0380831681851681830481118215151615612bab57612bab612cb9565b02949350505050565b6000816000190483118215151615612bce57612bce612cb9565b500290565b60006001600160801b0383811690831681811015612bf357612bf3612cb9565b039392505050565b600082821015612c0d57612c0d612cb9565b500390565b60005b83811015612c2d578181015183820152602001612c15565b838111156111f95750506000910152565b600081612c4d57612c4d612cb9565b506000190190565b600181811c90821680612c6957607f821691505b6020821081141561297d57634e487b7160e01b600052602260045260246000fd5b6000600019821415612c9e57612c9e612cb9565b5060010190565b600082612cb457612cb4612ccf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461100957600080fdfea26469706673582212206c43a9c6c414d0e6abcb4cd5e425ec7f2ae9f7e68bba4c0ff19e2c429017776f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806370a08231116100f7578063a22cb46511610095578063d7224ba011610064578063d7224ba01461057a578063e8a3d48514610590578063e985e9c5146105a5578063f2fde38b146105ee57600080fd5b8063a22cb465146104fa578063a60cc5171461051a578063b88d4fde1461053a578063c87b56dd1461055a57600080fd5b80638da5cb5b116100d15780638da5cb5b1461042b5780638e3695b81461044957806395d89b41146104d2578063a0712d68146104e757600080fd5b806370a08231146103e1578063715018a614610401578063880846051461041657600080fd5b80632f745c591161016f5780634f6ccce71161013e5780634f6ccce71461033f57806355f804b31461035f5780635d4788771461037f5780636352211e146103c157600080fd5b80632f745c59146102d75780632fad121a146102f75780633ccfd60b1461030a57806342842e0e1461031f57600080fd5b8063095ea7b3116101ab578063095ea7b3146102615780630f5d66ad1461028357806318160ddd1461029857806323b872dd146102b757600080fd5b806301ffc9a7146101d257806306fdde0314610207578063081812fc14610229575b600080fd5b3480156101de57600080fd5b506101f26101ed36600461289a565b61060e565b60405190151581526020015b60405180910390f35b34801561021357600080fd5b5061021c61067b565b6040516101fe9190612a5a565b34801561023557600080fd5b506102496102443660046129aa565b61070d565b6040516001600160a01b0390911681526020016101fe565b34801561026d57600080fd5b5061028161027c366004612857565b61079d565b005b34801561028f57600080fd5b506102816108b5565b3480156102a457600080fd5b506000545b6040519081526020016101fe565b3480156102c357600080fd5b506102816102d236600461271e565b610900565b3480156102e357600080fd5b506102a96102f2366004612857565b61090b565b6102816103053660046128d2565b610a79565b34801561031657600080fd5b50610281610d16565b34801561032b57600080fd5b5061028161033a36600461271e565b610d2e565b34801561034b57600080fd5b506102a961035a3660046129aa565b610d49565b34801561036b57600080fd5b5061028161037a36600461292c565b610dab565b34801561038b57600080fd5b506103af61039a3660046126d2565b600c6020526000908152604090205460ff1681565b60405160ff90911681526020016101fe565b3480156103cd57600080fd5b506102496103dc3660046129aa565b610de1565b3480156103ed57600080fd5b506102a96103fc3660046126d2565b610df3565b34801561040d57600080fd5b50610281610e84565b34801561042257600080fd5b50610281610eb8565b34801561043757600080fd5b506008546001600160a01b0316610249565b34801561045557600080fd5b50600d546104969060ff808216916001600160681b036101008204811692600160701b83041691600160781b81049091169061ffff600160e01b9091041685565b6040805195151586526001600160681b03948516602087015292151592850192909252909116606083015261ffff16608082015260a0016101fe565b3480156104de57600080fd5b5061021c610ef6565b6102816104f53660046129aa565b610f05565b34801561050657600080fd5b5061028161051536600461282e565b61100c565b34801561052657600080fd5b5061028161053536600461296c565b6110d1565b34801561054657600080fd5b50610281610555366004612759565b6111c6565b34801561056657600080fd5b5061021c6105753660046129aa565b6111ff565b34801561058657600080fd5b506102a960075481565b34801561059c57600080fd5b5061021c6112cc565b3480156105b157600080fd5b506101f26105c03660046126ec565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156105fa57600080fd5b506102816106093660046126d2565b6112db565b60006001600160e01b031982166380ac58cd60e01b148061063f57506001600160e01b03198216635b5e139f60e01b145b8061065a57506001600160e01b0319821663780e9d6360e01b145b8061067557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461068a90612c55565b80601f01602080910402602001604051908101604052809291908181526020018280546106b690612c55565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050905090565b600061071a826000541190565b6107815760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b60006107a882610de1565b9050806001600160a01b0316836001600160a01b031614156108175760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610778565b336001600160a01b0382161480610833575061083381336105c0565b6108a55760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610778565b6108b0838383611373565b505050565b6008546001600160a01b031633146108df5760405162461bcd60e51b815260040161077890612a6d565b600d805460ff60701b198116600160701b9182900460ff1615909102179055565b6108b08383836113cf565b600061091683610df3565b821061096f5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610778565b600080549080805b83811015610a19576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156109ca57805192505b876001600160a01b0316836001600160a01b03161415610a0657868414156109f85750935061067592505050565b83610a0281612c8a565b9450505b5080610a1181612c8a565b915050610977565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610778565b610a838383611757565b600d54600160701b900460ff16610ad45760405162461bcd60e51b81526020600482015260156024820152746e6f7420696e2077686974656c6973742073616c6560581b6044820152606401610778565b611b5860ff8216610ae460005490565b610aee9190612b34565b1115610b305760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b6044820152606401610778565b600d54610bb890610b509060ff841690600160e01b900461ffff16612b17565b61ffff161115610ba25760405162461bcd60e51b815260206004820152601b60248201527f6578636565642077686974656c697374206d617820737570706c7900000000006044820152606401610778565b600d805460ff83169190601c90610bc5908490600160e01b900461ffff16612b17565b92506101000a81548161ffff021916908361ffff160217905550600560ff1681600c6000610bf03390565b6001600160a01b03168152602081019190915260400160002054610c17919060ff16612b4c565b60ff161115610c615760405162461bcd60e51b81526020600482015260166024820152756578636565642077686974656c6973742071756f746160501b6044820152606401610778565b336000908152600c602052604081208054839290610c8390849060ff16612b4c565b92506101000a81548160ff021916908360ff16021790555034600d600001600f9054906101000a90046001600160681b03168260ff16610cc39190612b85565b6001600160681b031614610d095760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b6044820152606401610778565b6108b0338260ff16611861565b600b54610d2c906001600160a01b03164761187f565b565b6108b0838383604051806020016040528060008152506111c6565b600080548210610da75760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610778565b5090565b6008546001600160a01b03163314610dd55760405162461bcd60e51b815260040161077890612a6d565b6108b0600a83836125d6565b6000610dec82611998565b5192915050565b60006001600160a01b038216610e5f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610778565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6008546001600160a01b03163314610eae5760405162461bcd60e51b815260040161077890612a6d565b610d2c6000611b42565b6008546001600160a01b03163314610ee25760405162461bcd60e51b815260040161077890612a6d565b600d805460ff19811660ff90911615179055565b60606002805461068a90612c55565b600d5460ff16610f4c5760405162461bcd60e51b81526020600482015260126024820152716e6f7420696e207075626c69632073616c6560701b6044820152606401610778565b611b5881610f5960005490565b610f639190612b34565b1115610fa55760405162461bcd60e51b8152602060048201526011602482015270657863656564206d617820737570706c7960781b6044820152606401610778565b600d543490610fc29061010090046001600160681b031683612bb4565b14610fff5760405162461bcd60e51b815260206004820152600d60248201526c3830bcb6b2b73a1032b93937b960991b6044820152606401610778565b6110093382611861565b50565b6001600160a01b0382163314156110655760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610778565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146110fb5760405162461bcd60e51b815260040161077890612a6d565b6111086020820182612880565b600d805460ff19169115159190911790556111296040820160208301612983565b600d80546001600160681b0392909216610100026dffffffffffffffffffffffffff00199092169190911790556111666060820160408301612880565b600d8054911515600160701b0260ff60701b199092169190911790556111926080820160608301612983565b600d80546001600160681b0392909216600160781b026cffffffffffffffffffffffffff60781b1990921691909117905550565b6111d18484846113cf565b6111dd84848484611b94565b6111f95760405162461bcd60e51b815260040161077890612aa2565b50505050565b606061120c826000541190565b6112705760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610778565b600061127a611ca2565b9050600081511161129a57604051806020016040528060008152506112c5565b806112a484611cb1565b6040516020016112b59291906129ee565b6040516020818303038152906040525b9392505050565b60606009805461068a90612c55565b6008546001600160a01b031633146113055760405162461bcd60e51b815260040161077890612a6d565b6001600160a01b03811661136a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610778565b61100981611b42565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006113da82611998565b80519091506000906001600160a01b0316336001600160a01b031614806114115750336114068461070d565b6001600160a01b0316145b806114235750815161142390336105c0565b90508061148d5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610778565b846001600160a01b031682600001516001600160a01b0316146115015760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610778565b6001600160a01b0384166115655760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610778565b6115756000848460000151611373565b6001600160a01b03851660009081526004602052604081208054600192906115a79084906001600160801b0316612bd3565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b038616600090815260046020526040812080546001945090926115f391859116612af5565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b0319909116919092161717905561167b846001612b34565b6000818152600360205260409020549091506001600160a01b031661170d576116a5816000541190565b1561170d5760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b604080517fdabea70844bf24d9249fbcd43ff305a229af24da603ae5c43f957f44dcbd0bed602082015233918101919091526000906117ae9060600160405160208183030381529060405280519060200120611dcb565b90506117f08184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1992505050565b6001600160a01b031661180b6008546001600160a01b031690565b6001600160a01b0316146108b05760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206f7220756e617574686f72697a65640000000000000000006044820152606401610778565b61187b828260405180602001604052806000815250611e3d565b5050565b804710156118cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610778565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461191c576040519150601f19603f3d011682016040523d82523d6000602084013e611921565b606091505b50509050806108b05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610778565b60408051808201909152600080825260208201526119b7826000541190565b611a165760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610778565b60007f00000000000000000000000000000000000000000000000000000000000000008310611a7757611a697f000000000000000000000000000000000000000000000000000000000000000084612bfb565b611a74906001612b34565b90505b825b818110611ae1576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215611ace57949350505050565b5080611ad981612c3e565b915050611a79565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610778565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006001600160a01b0384163b15611c9657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611bd8903390899088908890600401612a1d565b602060405180830381600087803b158015611bf257600080fd5b505af1925050508015611c22575060408051601f3d908101601f19168201909252611c1f918101906128b6565b60015b611c7c573d808015611c50576040519150601f19603f3d011682016040523d82523d6000602084013e611c55565b606091505b508051611c745760405162461bcd60e51b815260040161077890612aa2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c9a565b5060015b949350505050565b6060600a805461068a90612c55565b606081611cd55750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611cff5780611ce981612c8a565b9150611cf89050600a83612b71565b9150611cd9565b60008167ffffffffffffffff811115611d2857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d52576020820181803683370190505b5090505b8415611c9a57611d67600183612bfb565b9150611d74600a86612ca5565b611d7f906030612b34565b60f81b818381518110611da257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611dc4600a86612b71565b9450611d56565b6000610675611dd8612118565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611e28858561223f565b91509150611e35816122af565b509392505050565b6000546001600160a01b038416611ea05760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610778565b611eab816000541190565b15611ef85760405162461bcd60e51b815260206004820152601d60248201527f455243373231413a20746f6b656e20616c7265616479206d696e7465640000006044820152606401610778565b7f0000000000000000000000000000000000000000000000000000000000000000831115611f735760405162461bcd60e51b815260206004820152602260248201527f455243373231413a207175616e7469747920746f206d696e7420746f6f2068696044820152610ced60f31b6064820152608401610778565b6001600160a01b0384166000908152600460209081526040918290208251808401845290546001600160801b038082168352600160801b9091041691810191909152815180830190925280519091908190611fcf908790612af5565b6001600160801b03168152602001858360200151611fed9190612af5565b6001600160801b039081169091526001600160a01b0380881660008181526004602090815260408083208751978301518716600160801b0297909616969096179094558451808601865291825267ffffffffffffffff4281168386019081528883526003909552948120915182549451909516600160a01b026001600160e01b031990941694909216939093179190911790915582905b8581101561210d5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a46120d16000888488611b94565b6120ed5760405162461bcd60e51b815260040161077890612aa2565b816120f781612c8a565b925050808061210590612c8a565b915050612084565b50600081905561174f565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561217157507f000000000000000000000000000000000000000000000000000000000000000046145b1561219b57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156122765760208301516040840151606085015160001a61226a878285856124b0565b945094505050506122a8565b8251604014156122a0576020830151604084015161229586838361259d565b9350935050506122a8565b506000905060025b9250929050565b60008160048111156122d157634e487b7160e01b600052602160045260246000fd5b14156122da5750565b60018160048111156122fc57634e487b7160e01b600052602160045260246000fd5b141561234a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610778565b600281600481111561236c57634e487b7160e01b600052602160045260246000fd5b14156123ba5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610778565b60038160048111156123dc57634e487b7160e01b600052602160045260246000fd5b14156124355760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610778565b600481600481111561245757634e487b7160e01b600052602160045260246000fd5b14156110095760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610778565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124e75750600090506003612594565b8460ff16601b141580156124ff57508460ff16601c14155b156125105750600090506004612594565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612564573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661258d57600060019250925050612594565b9150600090505b94509492505050565b6000806001600160ff1b038316816125ba60ff86901c601b612b34565b90506125c8878288856124b0565b935093505050935093915050565b8280546125e290612c55565b90600052602060002090601f016020900481019282612604576000855561264a565b82601f1061261d5782800160ff1982351617855561264a565b8280016001018555821561264a579182015b8281111561264a57823582559160200191906001019061262f565b50610da79291505b80821115610da75760008155600101612652565b80356001600160a01b038116811461267d57600080fd5b919050565b8035801515811461267d57600080fd5b60008083601f8401126126a3578182fd5b50813567ffffffffffffffff8111156126ba578182fd5b6020830191508360208285010111156122a857600080fd5b6000602082840312156126e3578081fd5b6112c582612666565b600080604083850312156126fe578081fd5b61270783612666565b915061271560208401612666565b90509250929050565b600080600060608486031215612732578081fd5b61273b84612666565b925061274960208501612666565b9150604084013590509250925092565b6000806000806080858703121561276e578081fd5b61277785612666565b935061278560208601612666565b925060408501359150606085013567ffffffffffffffff808211156127a8578283fd5b818701915087601f8301126127bb578283fd5b8135818111156127cd576127cd612ce5565b604051601f8201601f19908116603f011681019083821181831017156127f5576127f5612ce5565b816040528281528a602084870101111561280d578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215612840578182fd5b61284983612666565b915061271560208401612682565b60008060408385031215612869578182fd5b61287283612666565b946020939093013593505050565b600060208284031215612891578081fd5b6112c582612682565b6000602082840312156128ab578081fd5b81356112c581612cfb565b6000602082840312156128c7578081fd5b81516112c581612cfb565b6000806000604084860312156128e6578283fd5b833567ffffffffffffffff8111156128fc578384fd5b61290886828701612692565b909450925050602084013560ff81168114612921578182fd5b809150509250925092565b6000806020838503121561293e578182fd5b823567ffffffffffffffff811115612954578283fd5b61296085828601612692565b90969095509350505050565b600060a0828403121561297d578081fd5b50919050565b600060208284031215612994578081fd5b81356001600160681b03811681146112c5578182fd5b6000602082840312156129bb578081fd5b5035919050565b600081518084526129da816020860160208601612c12565b601f01601f19169290920160200192915050565b60008351612a00818460208801612c12565b835190830190612a14818360208801612c12565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a50908301846129c2565b9695505050505050565b6020815260006112c560208301846129c2565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b03808316818516808303821115612a1457612a14612cb9565b600061ffff808316818516808303821115612a1457612a14612cb9565b60008219821115612b4757612b47612cb9565b500190565b600060ff821660ff84168060ff03821115612b6957612b69612cb9565b019392505050565b600082612b8057612b80612ccf565b500490565b60006001600160681b0380831681851681830481118215151615612bab57612bab612cb9565b02949350505050565b6000816000190483118215151615612bce57612bce612cb9565b500290565b60006001600160801b0383811690831681811015612bf357612bf3612cb9565b039392505050565b600082821015612c0d57612c0d612cb9565b500390565b60005b83811015612c2d578181015183820152602001612c15565b838111156111f95750506000910152565b600081612c4d57612c4d612cb9565b506000190190565b600181811c90821680612c6957607f821691505b6020821081141561297d57634e487b7160e01b600052602260045260246000fd5b6000600019821415612c9e57612c9e612cb9565b5060010190565b600082612cb457612cb4612ccf565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461100957600080fdfea26469706673582212206c43a9c6c414d0e6abcb4cd5e425ec7f2ae9f7e68bba4c0ff19e2c429017776f64736f6c63430008040033",
  "devdoc": {
    "author": "Japan NFT Culture Association (https://www.jnca.io)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "details": "Setup contractURI, initial base URI, ERC721"
      },
      "flipPublicSale()": {
        "details": "Flip public sale state"
      },
      "flipWhitelistSale()": {
        "details": "Flip whitelist sale state"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Change base URI to reveal NFT"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSaleInfo((bool,uint104,bool,uint104,uint16))": {
        "details": "Update sale info (without changing whitelist supply)"
      },
      "withdraw()": {
        "details": "Withdraw fund from contract to receiver"
      }
    },
    "title": "Artwork NFT by Yayoi Kusama",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Contract info read by marketplace"
      },
      "mint(uint256)": {
        "notice": "Mint certain amount of tokens"
      },
      "whitelistMint(bytes,uint8)": {
        "notice": "Mint for whitelist (EIP712)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1453,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1459,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1461,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1466,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_ownerships",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)1445_storage)"
      },
      {
        "astId": 1471,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_addressData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AddressData)1450_storage)"
      },
      {
        "astId": 1475,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1481,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2424,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "nextOwnerToExplicitlySet",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2632,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_contractURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2634,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2636,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "_fundReceiver",
        "offset": 0,
        "slot": "11",
        "type": "t_address_payable"
      },
      {
        "astId": 2640,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "whitelistAlreadyMinted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 2654,
        "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
        "label": "saleInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(SaleInfo)2651_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)1450_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)1450_storage"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)1445_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)1445_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)1450_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 1447,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1449,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SaleInfo)2651_storage": {
        "encoding": "inplace",
        "label": "struct YayoiKusamaHandbagArtwork.SaleInfo",
        "members": [
          {
            "astId": 2642,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "isPublic",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2644,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "publicPrice",
            "offset": 1,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 2646,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "isWhitelist",
            "offset": 14,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2648,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "whitelistPrice",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 2650,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "whitelistSupply",
            "offset": 28,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)1445_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 1442,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1444,
            "contract": "contracts/YayoiKusamaHandbagArtwork.sol:YayoiKusamaHandbagArtwork",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}